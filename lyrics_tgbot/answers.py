from genius import search, get_text
from aiogram import types

start_aw = '''–ü—Ä–∏–≤–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–µ–Ω
–í–≤–µ–¥–∏ @lyricstgbot –∏ –Ω–∞—á–Ω–∏ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, —è –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –Ω–∞—à–µ–ª
'''


def build_query_aw(q_str: str) -> list:
    """Build query list for send to user

    Args:
        q_str (str): search query

    Returns:
        list: list for sending
    """
    result = []
    if len(q_str) == 0:
        return result
    else:
        tracks = search(q_str)
        id = 0
        for track in tracks['songs']:
            name = track['title']
            artist = track['artist']
            track_id = int(track['api_path'].split('/')[-1])
            title = f'{name} ({artist})'
            if track['pageviews']:
                views = track['pageviews']
                description = f'üìà –ü—Ä–æ—Å–º–æ—Ç–æ–≤: {views}'
            else:
                description = None

            result.append(
                types.InlineQueryResultArticle(
                    id=str(id),
                    title=title,
                    description=description,
                    input_message_content=types.InputTextMessageContent(
                        message_text=(f'/track{track_id}')
                    ),
                    thumb_url=track['image']
                )
            )
            id += 1

    return result


def lyrics_aw(id: int):
    api_path = f'/songs/{id}'
    return get_text(api_path)
